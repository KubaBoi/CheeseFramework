#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time
from pathlib import Path

from cheese.resourceManager import ResMan
from cheese.appSettings import Settings
from cheese.server.cheeseServer import *
from cheese.databaseControll.database import Database
from cheese.modules.cheeseRepository import CheeseRepository
from cheese.ErrorCodes import Error
from cheese.Logger import Logger
"""
File generated by Cheese Framework

initialize Cheese Application
"""

class Cheese:

    @staticmethod
    def init():
        # initialization of root directory
        ResMan.setPath(Path(__file__).parent.parent.parent)
        Cheese.printInit()

        # log new line
        Logger.info(2*"\n" + 10*"=" + f"Start in file {ResMan.path}" + 10*"=")

        # init errors
        Error.init()

        # loads application settings
        Settings.loadSettings()

        # connect to database
        Database.connect()

        #initialization of repositories
        CheeseRepository.initRepositories()

        # initialization of server
        Cheese.initServer()

    # initialization application server
    @staticmethod
    def initServer():
        if (Settings.multiThreading):
            Cheese.server = CheeseServerMulti((Settings.host, Settings.port), CheeseHandler)
        else:
            Cheese.server = CheeseServer((Settings.host, Settings.port), CheeseHandler)

    # start server
    @staticmethod
    def serveForever():
        Logger.info(f"Server Starts - {Settings.host}:{Settings.port}")
        try:
            Cheese.server.serve_forever()
        except KeyboardInterrupt:
            pass
        except Exception as e:
            Logger.fail(e)
        Logger.info(f"Server Stops - {Settings.host}:{Settings.port}")

    # init print
    @staticmethod
    def printInit():
        with open(f"{ResMan.cheese()}/initString.txt", "r") as f:
            print(f.read())

