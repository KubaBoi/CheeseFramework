{
    "00STATS": {
        "CLASSES": 29,
        "METHODS": 145
    },
    "01ERRORS": [],
    "AdminFiles": {
        "file": "adminFiles.py",
        "methods": [
            "sayHello"
        ]
    },
    "AdminManager": {
        "file": "adminManager.py",
        "methods": [
            "_AdminManager__changeConfig",
            "_AdminManager__createUser",
            "_AdminManager__deleteAll",
            "_AdminManager__deleteLog",
            "_AdminManager__getActiveLog",
            "_AdminManager__getRelease",
            "_AdminManager__getSettings",
            "_AdminManager__restart",
            "_AdminManager__restartServer",
            "_AdminManager__sendFile",
            "_AdminManager__showLogs",
            "_AdminManager__shutDown",
            "_AdminManager__update",
            "authorizeAsAdmin",
            "controller",
            "setAuth"
        ]
    },
    "ApiControllerCreator": {
        "file": "createApi.py",
        "methods": [
            "createApiControllers",
            "createController",
            "createScript",
            "fromVariable",
            "getAuthorization",
            "getCodeFromFigure",
            "getPlural",
            "getScript",
            "getSingular",
            "removeScript",
            "toVariable",
            "updateScript"
        ]
    },
    "ApiGenerator": {
        "file": "generateApi.py",
        "methods": [
            "create",
            "createCREATE",
            "createContents",
            "createCustom",
            "createDELETE",
            "createEndpoint",
            "createGET",
            "createGETALL",
            "createGETBY",
            "createHeader",
            "createUPDATE",
            "endFigure",
            "generateApi",
            "getJson",
            "lite",
            "printOptions",
            "startFigure"
        ]
    },
    "CheeseHandler": {
        "file": "cheeseServer.py",
        "methods": [
            "finish",
            "flush_headers",
            "setup"
        ]
    },
    "CheeseRepository": {
        "file": "cheeseRepository.py",
        "methods": [
            "commit",
            "commitType",
            "disableAutocommit",
            "enableAutocommit",
            "toModel"
        ]
    },
    "CheeseServerMulti": {
        "file": "cheeseServer.py",
        "methods": [
            "server_close"
        ]
    },
    "CheeseTests": {
        "file": "cheeseTests.py",
        "methods": [
            "formatTime",
            "getTestSign",
            "oneTest",
            "testAll"
        ]
    },
    "Cheeser": {
        "file": "cheeser.py",
        "methods": [
            "build",
            "controllers",
            "createApi",
            "database",
            "generate",
            "help"
        ]
    },
    "ConsoleFilter": {
        "file": "Logger.py",
        "methods": [
            "filter"
        ]
    },
    "ControllerBuilder": {
        "file": "controllerBuilder.py",
        "methods": [
            "build"
        ]
    },
    "CreateByDB": {
        "file": "createByDb.py",
        "methods": [
            "addSpaces",
            "create",
            "createFiles",
            "createMethod",
            "generateModel",
            "generateRepository",
            "removeSpaces"
        ]
    },
    "Database": {
        "file": "database.py",
        "methods": [
            "close",
            "commit",
            "connect",
            "done",
            "query",
            "rollback"
        ]
    },
    "FileFilter": {
        "file": "Logger.py",
        "methods": [
            "filter"
        ]
    },
    "Finder": {
        "file": "finder.py",
        "methods": [
            "findAnnotatedStructure",
            "findClasses",
            "findMethods",
            "getAnnotationContent",
            "getAnnotationType",
            "getMultiline",
            "hasAnnotation",
            "isAnnotated",
            "isSomething",
            "loadFile",
            "raiseDictError",
            "raiseError",
            "rreplace",
            "startsWith",
            "validateKey",
            "wOkG",
            "wWar"
        ]
    },
    "HeadersMock": {
        "file": "mock.py",
        "methods": [
            "get"
        ]
    },
    "HtmlFilter": {
        "file": "Logger.py",
        "methods": [
            "filter"
        ]
    },
    "Logger": {
        "file": "Logger.py",
        "methods": [
            "_Logger__addLoggingLevel",
            "_Logger__boldPrint",
            "_Logger__failPrint",
            "_Logger__getMethod",
            "_Logger__infoPrint",
            "_Logger__okBluePrint",
            "_Logger__okCyanPrint",
            "_Logger__okGreenPrint",
            "_Logger__underlinePrint",
            "_Logger__warningPrint",
            "adminInfo",
            "bold",
            "close",
            "fail",
            "info",
            "initLogger",
            "listLogs",
            "okBlue",
            "okCyan",
            "okGreen",
            "serveLogs",
            "set",
            "underline",
            "warning"
        ]
    },
    "MockManager": {
        "file": "mockManager.py",
        "methods": [
            "setMock"
        ]
    },
    "Pointer": {
        "file": "pointer.py",
        "methods": [
            "getValue",
            "setValue"
        ]
    },
    "ProjectBuilder": {
        "file": "projectBuilder.py",
        "methods": [
            "build",
            "count",
            "doJson",
            "doMethods",
            "validateJson",
            "validateJsonOne"
        ]
    },
    "ProjectGenerator": {
        "file": "projectGenerator.py",
        "methods": [
            "generate"
        ]
    },
    "RepositoriesBuilder": {
        "file": "repositoriesBuilder.py",
        "methods": [
            "build",
            "preCommits",
            "preQueries"
        ]
    },
    "RfileMock": {
        "file": "mock.py",
        "methods": [
            "read"
        ]
    },
    "SecurityBuilder": {
        "file": "securityBuilder.py",
        "methods": [
            "build"
        ]
    },
    "ServerMock": {
        "file": "mock.py",
        "methods": [
            "mockPostBody"
        ]
    },
    "TestsBuilder": {
        "file": "testsBuilder.py",
        "methods": [
            "build"
        ]
    },
    "UnitTest": {
        "file": "test.py",
        "methods": [
            "assertEqual",
            "assertFalse",
            "assertTrue"
        ]
    },
    "Updater": {
        "file": "checkVersion.py",
        "methods": [
            "checkUpdate"
        ]
    }
}